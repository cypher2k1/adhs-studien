<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Seite_2_16_6</title>
<link rel="stylesheet" type="text/css" href="../Format/Format.css">
<script type="text/javascript" src="../Go_Seite.js"></script>
</head>

<body id="seite" onload="parent.parent.savePage()">
<table summary="Seiteninhalt" border="0" cellspacing="2" cellpadding="2" width="724">
  <tr>
    <td width="550"><b>Überladen</b></td>
    <td width="36"><img src="../Medien/Spacer.gif" width="36" height="1"></td>
    <td width="128"><img src="../Medien/Spacer.gif" width="128" height="1"></td>
  </tr>

  <tr>
    <td><p>Wenn zwei Methoden einer Klasse den <b>gleichen Namen</b> haben, wie im Beispiel von
        Konstruktoren, dann ist dies nur dann erlaubt, wenn die Methoden Parameter mit
        <b>unterschiedlichen Typen</b> haben.</p></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>

  <tr>
    <td><p>Die Kombination aus Methodenname und Datentypen der Parameter nennt man die <b>Signatur</b>
        der Methode. Und diese muss in einer Klasse <b>immer eindeutig</b> sein.</p></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><p>Wenn diese zwei Methoden also den gleichen Namen haben und eine davon aufgerufen wird, dann
        sucht Java automatisch die passende Methode, entsprechend den Typen der angegebenen Parameter.
        Diesen Vorgang nennt man <a href="JavaScript:parent.parent.frames[1].CMDown('GET_Glossar','MODULECTRL','Uberladen','')"
        onMouseOver="self.status='zum Glossar';return true" onMouseOut="self.status='';return true"; id="glos">
        <b>Überladen</b></a>.</p></td>
    <td>&nbsp;</td>
    <td align="left" valign="top" ><img src="../Medien/Definition.gif" width="36"
      height="36" alt="Hinweis: Definition(en) im Lehrtext"><br><font id="pikto">Definition</font></td>
  </tr>
  <tr>
     <td>
      <table>
        <tr>
   	       <td align="left" valign="middle"><img src="../Medien/Marker2.gif" width="8" height="44" ></td>
  	       <td>Wenn dies nicht geht, dann gibt es eine Fehlermeldung. So reicht es zum Beispiel nicht, wenn
        	die Parameter nur unterschiedliche Namen haben - <b>die Typen m&uuml;ssen sich unterscheiden</b>, der
        	Name spielt keine Rolle.</td>
        </tr>
      </table>
    </td>
    <td>&nbsp;</td>
    <td align="left" valign="top"><img src="../Medien/Hinweis.gif" width="36" height="36"
        alt="Hinweis: wichtige Hinweis(e) im Lehrtext"><br><font id="pikto">Hinweis</font></td>
  </tr>

  <tr>
       <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
  </tr>

  <tr>
    <td width="550"><b>Polymorphie</b></td>
    <td width="36"><img src="../Medien/Spacer.gif" width="36" height="1"></td>
    <td width="128"><img src="../Medien/Spacer.gif" width="128" height="1"></td>
  </tr>
  <tr>
      <td><p>Wenn in einer Subklasse eine Methode eine <b>andere Bedeutung</b> erhalten soll als in der Klasse, von der sie
      	  abgeleitet wurde, muss die Methode in der Subklasse wieder angegeben werden.
      	  Man bezeichnet diesen Vorgang auch als <b>&Uuml;berschreiben</b>. </p></td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
  </tr>
  <tr>
      <td><p>Die Mechanismen der Sprache Java stellen sicher, dass zur Laufzeit die zum konkreten
          Objekt passende Methode ausgewählt wird. Dies bezeichnet man auch als &quot;sp&auml;te Bindung&quot; oder <a href="JavaScript:parent.parent.frames[1].CMDown('GET_Glossar','MODULECTRL','Polymorphie','')"
          onMouseOver="self.status='zum Glossar';return true" onMouseOut="self.status='';return true"; id="glos">
          <b>Polymorphie</b></a>.</p></td>
      <td>&nbsp;</td>
      <td align="left" valign="top" ><img src="../Medien/Definition.gif" width="36"
        height="36" alt="Hinweis: Definition(en) im Lehrtext"><br><font id="pikto">Definition</font></td>
  </tr>
  <tr>
     <td><p>Mit Polymorphie ist es m&ouml;glich, in einer Klasse Methoden festzulegen, die erst in abgeleiteten
         Subklassen konkretisiert werden. In diesem Fall spricht man von <a href="javascript:goPage('2_13_1.htm')" onMouseOver="self.status='zu Seite 2.13.1';return true;"
        onMouseOut="self.status='';return true" id="hier">abstrakten Klassen bzw. Methoden</a>.</p></td>
     <td>&nbsp;</td>
     <td>&nbsp;</td>
  </tr>
</table>
</body>
</html>